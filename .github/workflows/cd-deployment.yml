name: CD - Deployment

on:
  push:
    branches:
      - deployment

jobs:
  deploy_application:
    runs-on: self-hosted

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3


    - name: Clone Repository
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
            if [ ! -d "~/cv-challenge-03" ]; then
              git clone -b integration https://${{ secrets.GITHUB_PAT }}@github.com/kappu1512/cv-challenge-03.git ~/cv-challenge-03
            else
              echo "Repository already cloned. Pulling latest changes."
              cd ~/cv-challenge-03
              git pull
            fi
      
    # # Step 2: Clone Repository on Target Server
    # - name: Clone Repository
    #   uses: appleboy/ssh-action@v0.1.5
    #   with:
    #     host: ${{ secrets.TARGET_SERVER_HOST }}
    #     username: ${{ secrets.TARGET_SERVER_USER }}
    #     key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
    #     port: 22
    #     script: |
    #       if [ ! -d "~/cv-challenge-03" ]; then
    #         git clone https://github.com/your-username/cv-challenge-03.git ~/cv-challenge-03
    #       else
    #         echo "Repository already cloned. Pulling latest change."
    #         cd ~/cv-challenge-03
    #         git pull
    #       fi

    # Step 3: Install Docker Compose on the Target Server
    - name: Install Docker Compose
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          if ! [ -x "$(command -v docker-compose)" ]; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          docker-compose --version

    # Step 4: Pull Docker Images on the Target Server
    - name: Pull Docker Images
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker pull kappu1512/frontend:latest
          docker pull kappu1512/backend:latest

    # Step 5: Deploy Application Using Docker Compose
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          cd ~/cv-challenge-03/source/application
          docker-compose down
          docker-compose up -d

    # Step 6: Health Check
    - name: Run Health Check
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          curl -f http://localhost:80 || exit 1
