name: CD - Deployment

on:
  push:
    branches:
      - deployment

jobs:
  deploy_application:
    runs-on: self-hosted

    steps:
    # Step 1: Clone the Code
    - name: Clone Repository
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          export GITHUB_PAT=${{ secrets.MY_GITHUB_PAT }}

          # Set up Git credentials
          git config --global credential.helper store
          echo "https://${GITHUB_PAT}:@github.com" > ~/.git-credentials

          # Define repository directory
          REPO_DIR="$HOME/cv-challenge-03-test"

          # Check if the directory exists and delete it if it does
          if [ -d "$REPO_DIR" ]; then
            echo "Directory exists. Deleting it."
            rm -rf "$REPO_DIR"
          fi

          # Clone the repository
          echo "Cloning the repository."
          git clone -b integration https://github.com/kapilkumaria/cv-challenge-03-test.git "$REPO_DIR"     
              
    # Step 2: Set 600 Permissions for acme.json
    - name: Set permissions for acme.json
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          chmod 600 /home/ubuntu/cv-challenge-03-test/traefik/letsencrypt/acme.json
        
    # Step 3: Set Executable Permissions for prestart.sh
    - name: Set permissions for prestart.sh
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          chmod +x /home/ubuntu/cv-challenge-03-test/source/backend/prestart.sh

    # Step 4: Pull Docker Images on the Target Server
    - name: Pull Docker Images
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker pull kappu1512/frontend:latest
          docker pull kappu1512/backend:latest
          docker pull kappu1512/traefik:v2.10.1
          docker pull kappu1512/adminer:latest            

    # Step 5: Install Docker Compose on Target Machine
    - name: Install Docker Compose
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          # Update the package list
          sudo apt update
          
          # Install dependencies
          sudo apt install -y curl jq

          # Download the latest version of Docker Compose
          DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

          # Make Docker Compose executable
          sudo chmod +x /usr/local/bin/docker-compose

          # Verify the installation
          docker-compose --version
          
    # Step 6: Install Ansible on Target Machine
    - name: Install Ansible
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install -y ansible       
          
    # Step 7: Deploy Application Using Docker Compose
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.TARGET_SERVER_HOST }}
        username: ${{ secrets.TARGET_SERVER_USER }}
        key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
        port: 22
        script: |
          docker-compose -f /home/ubuntu/cv-challenge-03-test/source/application/docker-compose.application.yaml down
          docker-compose -f /home/ubuntu/cv-challenge-03-test/source/application/docker-compose.application.yaml up -d

    # # Step 7: Run Health Check
    # - name: Run Health Checks
    #   uses: appleboy/ssh-action@v0.1.5
    #   with:
    #     host: ${{ secrets.TARGET_SERVER_HOST }}
    #     username: ${{ secrets.TARGET_SERVER_USER }}
    #     key: ${{ secrets.TARGET_SERVER_SSH_KEY }}
    #     port: 22
    #     script: |
    #       # Wait for the application to start by checking readiness
    #       echo "Waiting for the application to start..."
          
    #       # Check frontend readiness
    #       until curl -sf http://localhost:3000 > /dev/null; do
    #         echo "Waiting for the frontend to be ready..."
    #         sleep 5
    #       done
    #       echo "Frontend is ready!"

    #       # Check backend readiness
    #       until curl -sf https://boss.kapilkumaria.com/health > /dev/null; do
    #         echo "Waiting for the backend to be ready..."
    #         sleep 5
    #       done
    #       echo "Backend is ready!"

    #       # Final health checks
    #       echo "Checking the frontend health..."
    #       curl -f http://localhost:3000 || { echo "Frontend health check failed"; exit 1; }

    #       echo "Checking the backend health..."
    #       curl -f https://boss.kapilkumaria.com/health || { echo "Backend health check failed"; exit 1; }

    #       echo "All services are healthy!"
