# - name: Deploy Backend container
#   ansible.builtin.docker_container:
#     name: backend
#     image: kappu1512/backend
#     state: started
#     ports:
#       - "8000:8000"  # Map container port 8000 to host port 8000
#     # env_file: "{{ role_path }}/files/backend.env"
#     #env_file: /home/ubuntu/cv-challenge-o2/ansible/roles/application/files/backend.env
#     labels:
#       traefik.enable: "true"
#       traefik.http.routers.backend-http.rule: "(Host(`boss.kapilkumaria.com`) && PathPrefix(`/api/v1/openapi.json`))"
#       traefik.http.routers.backend-http.entrypoints: "web"
#       traefik.http.services.backend.loadbalancer.server.port: "8000"
#     networks:
#       - name: app_network

# # - name: Wait for Backend to be Ready
# #   ansible.builtin.wait_for:
# #     host: backend
# #     port: 8000
# #     timeout: 30
# #     state: started

- name: Deploy Backend container
  ansible.builtin.docker_container:
    name: backend
    image: kappu1512/backend
    state: started
    ports:
      - "8000:8000"  # Map container port 8000 to host port 8000
#    env_file:  # Use the environment file for the backend
#      - /home/ubuntu/cv-challenge-o2/ansible/roles/application/files/backend.env
    labels:
      traefik.enable: "true"
      # HTTP Router
      traefik.http.routers.backend-http.rule: "((Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)) && (PathPrefix(`/api/v1`) || PathPrefix(`/redoc`) || PathPrefix(`/docs`)))"
      traefik.http.routers.backend-http.entrypoints: "web"
      traefik.http.services.backend-http.loadbalancer.server.port: "8000"
      # www to non-www redirect
      traefik.http.routers.backend-https.middlewares: "www-to-non-www"
      # HTTPS Router
      traefik.http.routers.backend-https.rule: "((Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)) && (PathPrefix(`/api/v1`) || PathPrefix(`/redoc`) || PathPrefix(`/docs`)))"
      traefik.http.routers.backend-https.entrypoints: "websecure"
      traefik.http.routers.backend-https.tls.certresolver: "letsencryptresolver"
    networks:
      - name: app_network


- name: Deploy Frontend container
  ansible.builtin.docker_container:
    name: frontend
    image: kappu1512/frontend
    state: started
    #env_file: "/home/ubuntu/frontend.env"  # Ensure the env file exists on the target machine
    ports:
      - "5173:5173"
    labels:
      traefik.enable: "true"
      # HTTP Router
      traefik.http.routers.frontend-http.rule: "((Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)))"
      traefik.http.routers.frontend-http.entrypoints: "web"
      traefik.http.services.frontend.loadbalancer.server.port: "80"
      # www to non-www redirect
      traefik.http.routers.frontend-https.middlewares: "www-to-non-www"
      # HTTPS Router
      traefik.http.routers.frontend-https.rule: "((Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)))"
      traefik.http.routers.frontend-https.entrypoints: "websecure"
      traefik.http.routers.frontend-https.tls.certresolver: "letsencryptresolver"
      traefik.http.routers.frontend-https.service: "frontend"
    networks:
      - name: app_network





- name: Deploy Postgres container
  ansible.builtin.docker_container:
    name: db
    image: postgres:13
    state: started
    env:
      POSTGRES_PASSWORD: "changethis123"  # Set a strong password
      POSTGRES_USER: "app"
      POSTGRES_DB: "app"
    # env_file: "{{ role_path }}/files/db.env"
    networks:
      - name: app_network