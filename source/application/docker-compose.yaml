version: '3.8'
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"

services:  
  traefik:
    image: traefik:v2.10.1
    restart: unless-stopped
    container_name: traefik
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--api"
      - "--certificatesresolvers.letsencryptresolver.acme.email=kapil.kumaria@gmail.com"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencryptresolver.acme.tlschallenge=true"
      - "--accesslog=true"
      - "--log.level=ERROR"
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/ubuntu/cv-challenge01/traefik/letsencrypt/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      # Router for Traefik Dashboard API
      #- "traefik.enable=true"
      # Route for Traefik Dashboard 
      - "traefik.http.routers.dashboard.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/dashboard`)"
      # HTTP Router
      - "traefik.http.routers.http-to-https.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
      - "traefik.http.routers.http-to-https.entrypoints=web"
      - "traefik.http.services.http-to-https.loadbalancer.server.port=8080"
      # www to non-www redirect
      - "traefik.http.routers.traefik-https.middlewares=www-to-non-www"
      # HTTP to HTTPS redirect
      - "traefik.http.middlewares.www-to-non-www.redirectregex.regex=^https?://www\\.(.+)"
      - "traefik.http.middlewares.www-to-non-www.redirectregex.replacement=https://$1"
      - "traefik.http.middlewares.www-to-non-www.redirectregex.permanent=true"
      # HTTPS Router
      - "traefik.http.routers.backend.rule=PathPrefix(`/api/`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.middlewares=rewrite-api-overview"
      - "traefik.http.routers.backend.tls.certresolver=letsencryptresolver"
      # Middlewares Rewrites
      - "traefik.http.middlewares.rewrite-api-overview.replacepathregex.regex=/api/overview"
      - "traefik.http.middlewares.rewrite-api-overview.replacepathregex.replacement=/api/v1/openapi.json"
      # Middleware to strip the prefix "/dashboard"
      - "traefik.http.middlewares.dashboard-strip-prefix.stripprefix.prefixes=/dashboard"
      - "traefik.http.routers.dashboard.middlewares=dashboard-strip-prefix"
    networks:
      - app_network    
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    expose:
      - "9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prometheus'
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - app_network
    depends_on:
      - cadvisor
    labels:
      - traefik.enable=true
      # HTTP Service
      - traefik.http.services.prometheus.loadbalancer.server.port=9090 # important
      # HTTP Router ()
      - traefik.http.routers.prometheus-http.rule=((Host(`boss.kapilkumaria.com`)  || Host(`www.boss.kapilkumaria.com`)) && PathPrefix(`/prometheus`))
      - traefik.http.routers.prometheus-http.entrypoints=web
      # wwww to non-www redirect
      - traefik.http.routers.prometheus-https.middlewares=www-to-non-www
      # HTTPS Router
      - traefik.http.routers.prometheus-https.rule=((Host(`boss.kapilkumaria.com`)  || Host(`www.boss.kapilkumaria.com`)) && PathPrefix(`/prometheus`))
      - traefik.http.routers.prometheus-https.entrypoints=websecure
      - traefik.http.routers.prometheus-https.tls.certresolver=letsencryptresolver
      - traefik.http.routers.prometheus-https.service=prometheus # optional

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    expose:
      - "3000"
    ports:
      - "3000:3000"
    labels:
      - traefik.enable=true
      # HTTP Service
      - traefik.http.services.grafana.loadbalancer.server.port=3000 # important
      # HTTP Router 
      - traefik.http.routers.grafana-http.rule=((Host(`boss.kapilkumaria.com`)  || Host(`www.boss.kapilkumaria.com`)) && PathPrefix(`/grafana`))
      - traefik.http.routers.grafana-http.entrypoints=web
      # HTTP to HTTPS redirect
      - traefik.http.routers.grafana-https.middlewares=www-to-non-www
      # HTTPS Router
      - traefik.http.routers.grafana-https.rule=((Host(`boss.kapilkumaria.com`)  || Host(`www.boss.kapilkumaria.com`)) && PathPrefix(`/grafana`))
      - traefik.http.routers.grafana-https.entrypoints=websecure
      - traefik.http.routers.grafana-https.tls.certresolver=letsencryptresolver
      - traefik.http.routers.grafana-https.service=grafana # optional
    environment:
      - GF_SERVER_ROOT_URL=http://localhost:3000/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ./grafana.yaml:/etc/grafana/provisioning/datasources/grafana.yaml      
    networks:
      - app_network
    depends_on:
      - loki
      
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_network      
    depends_on:
      #- backend
      #- frontend
      #- adminer
      - traefik
      #- db

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - 3100:3100
    networks:
      - app_network
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    networks:
      - app_network      
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail-config.yaml
    depends_on:
      - loki

volumes:
  grafana:   

networks:
  app_network:
    external: true